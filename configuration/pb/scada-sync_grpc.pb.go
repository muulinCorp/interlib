// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: configuration/proto/scada-sync.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScadaSyncServiceClient is the client API for ScadaSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScadaSyncServiceClient interface {
	// 建立雙向stream連綫
	SyncConfigStream(ctx context.Context, in *SyncConfigReq, opts ...grpc.CallOption) (ScadaSyncService_SyncConfigStreamClient, error)
	// 告知sync進度
	ReportProgress(ctx context.Context, in *ReportProgressReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 從comm回傳log
	CommDebugLogReturn(ctx context.Context, in *DebugResultReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scadaSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScadaSyncServiceClient(cc grpc.ClientConnInterface) ScadaSyncServiceClient {
	return &scadaSyncServiceClient{cc}
}

func (c *scadaSyncServiceClient) SyncConfigStream(ctx context.Context, in *SyncConfigReq, opts ...grpc.CallOption) (ScadaSyncService_SyncConfigStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScadaSyncService_ServiceDesc.Streams[0], "/configuration.ScadaSyncService/SyncConfigStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &scadaSyncServiceSyncConfigStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScadaSyncService_SyncConfigStreamClient interface {
	Recv() (*SyncConfigResp, error)
	grpc.ClientStream
}

type scadaSyncServiceSyncConfigStreamClient struct {
	grpc.ClientStream
}

func (x *scadaSyncServiceSyncConfigStreamClient) Recv() (*SyncConfigResp, error) {
	m := new(SyncConfigResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scadaSyncServiceClient) ReportProgress(ctx context.Context, in *ReportProgressReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/configuration.ScadaSyncService/ReportProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaSyncServiceClient) CommDebugLogReturn(ctx context.Context, in *DebugResultReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/configuration.ScadaSyncService/CommDebugLogReturn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScadaSyncServiceServer is the server API for ScadaSyncService service.
// All implementations must embed UnimplementedScadaSyncServiceServer
// for forward compatibility
type ScadaSyncServiceServer interface {
	// 建立雙向stream連綫
	SyncConfigStream(*SyncConfigReq, ScadaSyncService_SyncConfigStreamServer) error
	// 告知sync進度
	ReportProgress(context.Context, *ReportProgressReq) (*emptypb.Empty, error)
	// 從comm回傳log
	CommDebugLogReturn(context.Context, *DebugResultReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedScadaSyncServiceServer()
}

// UnimplementedScadaSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScadaSyncServiceServer struct {
}

func (UnimplementedScadaSyncServiceServer) SyncConfigStream(*SyncConfigReq, ScadaSyncService_SyncConfigStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncConfigStream not implemented")
}
func (UnimplementedScadaSyncServiceServer) ReportProgress(context.Context, *ReportProgressReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProgress not implemented")
}
func (UnimplementedScadaSyncServiceServer) CommDebugLogReturn(context.Context, *DebugResultReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommDebugLogReturn not implemented")
}
func (UnimplementedScadaSyncServiceServer) mustEmbedUnimplementedScadaSyncServiceServer() {}

// UnsafeScadaSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScadaSyncServiceServer will
// result in compilation errors.
type UnsafeScadaSyncServiceServer interface {
	mustEmbedUnimplementedScadaSyncServiceServer()
}

func RegisterScadaSyncServiceServer(s grpc.ServiceRegistrar, srv ScadaSyncServiceServer) {
	s.RegisterService(&ScadaSyncService_ServiceDesc, srv)
}

func _ScadaSyncService_SyncConfigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncConfigReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScadaSyncServiceServer).SyncConfigStream(m, &scadaSyncServiceSyncConfigStreamServer{stream})
}

type ScadaSyncService_SyncConfigStreamServer interface {
	Send(*SyncConfigResp) error
	grpc.ServerStream
}

type scadaSyncServiceSyncConfigStreamServer struct {
	grpc.ServerStream
}

func (x *scadaSyncServiceSyncConfigStreamServer) Send(m *SyncConfigResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ScadaSyncService_ReportProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaSyncServiceServer).ReportProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ScadaSyncService/ReportProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaSyncServiceServer).ReportProgress(ctx, req.(*ReportProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaSyncService_CommDebugLogReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaSyncServiceServer).CommDebugLogReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ScadaSyncService/CommDebugLogReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaSyncServiceServer).CommDebugLogReturn(ctx, req.(*DebugResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScadaSyncService_ServiceDesc is the grpc.ServiceDesc for ScadaSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScadaSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configuration.ScadaSyncService",
	HandlerType: (*ScadaSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportProgress",
			Handler:    _ScadaSyncService_ReportProgress_Handler,
		},
		{
			MethodName: "CommDebugLogReturn",
			Handler:    _ScadaSyncService_CommDebugLogReturn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncConfigStream",
			Handler:       _ScadaSyncService_SyncConfigStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "configuration/proto/scada-sync.proto",
}
