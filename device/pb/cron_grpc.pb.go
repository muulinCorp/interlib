// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: device/proto/cron.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceCronServiceClient is the client API for DeviceCronService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceCronServiceClient interface {
	// 發佈設備資料
	PublishDeviceData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
	// 設備控制欄位數值更新
	UpdateDeviceRealtime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
}

type deviceCronServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceCronServiceClient(cc grpc.ClientConnInterface) DeviceCronServiceClient {
	return &deviceCronServiceClient{cc}
}

func (c *deviceCronServiceClient) PublishDeviceData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device.DeviceCronService/PublishDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCronServiceClient) UpdateDeviceRealtime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device.DeviceCronService/UpdateDeviceRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceCronServiceServer is the server API for DeviceCronService service.
// All implementations must embed UnimplementedDeviceCronServiceServer
// for forward compatibility
type DeviceCronServiceServer interface {
	// 發佈設備資料
	PublishDeviceData(context.Context, *emptypb.Empty) (*Response, error)
	// 設備控制欄位數值更新
	UpdateDeviceRealtime(context.Context, *emptypb.Empty) (*Response, error)
	mustEmbedUnimplementedDeviceCronServiceServer()
}

// UnimplementedDeviceCronServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceCronServiceServer struct {
}

func (UnimplementedDeviceCronServiceServer) PublishDeviceData(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDeviceData not implemented")
}
func (UnimplementedDeviceCronServiceServer) UpdateDeviceRealtime(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceRealtime not implemented")
}
func (UnimplementedDeviceCronServiceServer) mustEmbedUnimplementedDeviceCronServiceServer() {}

// UnsafeDeviceCronServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceCronServiceServer will
// result in compilation errors.
type UnsafeDeviceCronServiceServer interface {
	mustEmbedUnimplementedDeviceCronServiceServer()
}

func RegisterDeviceCronServiceServer(s grpc.ServiceRegistrar, srv DeviceCronServiceServer) {
	s.RegisterService(&DeviceCronService_ServiceDesc, srv)
}

func _DeviceCronService_PublishDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCronServiceServer).PublishDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceCronService/PublishDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCronServiceServer).PublishDeviceData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCronService_UpdateDeviceRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCronServiceServer).UpdateDeviceRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceCronService/UpdateDeviceRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCronServiceServer).UpdateDeviceRealtime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceCronService_ServiceDesc is the grpc.ServiceDesc for DeviceCronService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceCronService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceCronService",
	HandlerType: (*DeviceCronServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishDeviceData",
			Handler:    _DeviceCronService_PublishDeviceData_Handler,
		},
		{
			MethodName: "UpdateDeviceRealtime",
			Handler:    _DeviceCronService_UpdateDeviceRealtime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/proto/cron.proto",
}
